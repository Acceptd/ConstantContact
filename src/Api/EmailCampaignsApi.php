<?php
/**
 * EmailCampaignsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContact\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AppConnect V3
 *
 * The Constant Contact, Inc. V3 public API, for building integrations with Constant Contact, the leading small-business email marketing platform.
 *
 * The version of the OpenAPI document: 3.0.2400
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContact\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ConstantContact\Client\ApiException;
use ConstantContact\Client\Configuration;
use ConstantContact\Client\HeaderSelector;
use ConstantContact\Client\ObjectSerializer;

/**
 * EmailCampaignsApi Class Doc Comment
 *
 * @category Class
 * @package  ConstantContact\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EmailCampaignsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createEmailCampaignUsingPOST' => [
            'application/json',
        ],
        'createResendToNonOpenersUsingPOST' => [
            'application/json',
        ],
        'deleteResendToNonOpenersUsingDELETE' => [
            'application/json',
        ],
        'removeEmailCampaignUsingDELETE' => [
            'application/json',
        ],
        'renameEmailCampaignUsingPATCH' => [
            'application/json',
        ],
        'retrieveEmailCampaignActivityUsingGET' => [
            'application/json',
        ],
        'retrieveEmailCampaignUsingGET' => [
            'application/json',
        ],
        'retrieveEmailCampaignsUsingGET' => [
            'application/json',
        ],
        'retrieveResendToNonOpenersUsingGET' => [
            'application/json',
        ],
        'retrieveXrefMappingsUsingGET' => [
            'application/json',
        ],
        'updateEmailCampaignActivityUsingPUT' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createEmailCampaignUsingPOST
     *
     * POST (Create) a New Email Campaign
     *
     * @param  'ConstantContact\Client\Model\EmailCampaignComplete $body A JSON request body that contains the email content. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmailCampaignUsingPOST'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\EmailCampaign
     */
    public function createEmailCampaignUsingPOST($body, string $contentType = self::contentTypes['createEmailCampaignUsingPOST'][0])
    {
        list($response) = $this->createEmailCampaignUsingPOSTWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation createEmailCampaignUsingPOSTWithHttpInfo
     *
     * POST (Create) a New Email Campaign
     *
     * @param  'ConstantContact\Client\Model\EmailCampaignComplete $body A JSON request body that contains the email content. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmailCampaignUsingPOST'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\EmailCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEmailCampaignUsingPOSTWithHttpInfo($body, string $contentType = self::contentTypes['createEmailCampaignUsingPOST'][0])
    {
        $request = $this->createEmailCampaignUsingPOSTRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\EmailCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\EmailCampaign' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\EmailCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\EmailCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\EmailCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEmailCampaignUsingPOSTAsync
     *
     * POST (Create) a New Email Campaign
     *
     * @param  'ConstantContact\Client\Model\EmailCampaignComplete $body A JSON request body that contains the email content. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmailCampaignUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailCampaignUsingPOSTAsync($body, string $contentType = self::contentTypes['createEmailCampaignUsingPOST'][0])
    {
        return $this->createEmailCampaignUsingPOSTAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEmailCampaignUsingPOSTAsyncWithHttpInfo
     *
     * POST (Create) a New Email Campaign
     *
     * @param  'ConstantContact\Client\Model\EmailCampaignComplete $body A JSON request body that contains the email content. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmailCampaignUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailCampaignUsingPOSTAsyncWithHttpInfo($body, string $contentType = self::contentTypes['createEmailCampaignUsingPOST'][0])
    {
        $returnType = '\ConstantContact\Client\Model\EmailCampaign';
        $request = $this->createEmailCampaignUsingPOSTRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEmailCampaignUsingPOST'
     *
     * @param  'ConstantContact\Client\Model\EmailCampaignComplete $body A JSON request body that contains the email content. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmailCampaignUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createEmailCampaignUsingPOSTRequest($body, string $contentType = self::contentTypes['createEmailCampaignUsingPOST'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createEmailCampaignUsingPOST'
            );
        }


        $resourcePath = '/emails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createResendToNonOpenersUsingPOST
     *
     * POST a Resend to Non-openers Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  'ConstantContact\Client\Model\ResendToNonOpenersInput $resend_schedule A JSON request body that specifies when to resend the campaign activity to non-openers. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResendToNonOpenersUsingPOST'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\ResendToNonOpenersObject
     */
    public function createResendToNonOpenersUsingPOST($campaign_activity_id, $resend_schedule, string $contentType = self::contentTypes['createResendToNonOpenersUsingPOST'][0])
    {
        list($response) = $this->createResendToNonOpenersUsingPOSTWithHttpInfo($campaign_activity_id, $resend_schedule, $contentType);
        return $response;
    }

    /**
     * Operation createResendToNonOpenersUsingPOSTWithHttpInfo
     *
     * POST a Resend to Non-openers Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  'ConstantContact\Client\Model\ResendToNonOpenersInput $resend_schedule A JSON request body that specifies when to resend the campaign activity to non-openers. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResendToNonOpenersUsingPOST'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\ResendToNonOpenersObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function createResendToNonOpenersUsingPOSTWithHttpInfo($campaign_activity_id, $resend_schedule, string $contentType = self::contentTypes['createResendToNonOpenersUsingPOST'][0])
    {
        $request = $this->createResendToNonOpenersUsingPOSTRequest($campaign_activity_id, $resend_schedule, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\ConstantContact\Client\Model\ResendToNonOpenersObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\ResendToNonOpenersObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\ResendToNonOpenersObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\ResendToNonOpenersObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\ResendToNonOpenersObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createResendToNonOpenersUsingPOSTAsync
     *
     * POST a Resend to Non-openers Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  'ConstantContact\Client\Model\ResendToNonOpenersInput $resend_schedule A JSON request body that specifies when to resend the campaign activity to non-openers. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResendToNonOpenersUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createResendToNonOpenersUsingPOSTAsync($campaign_activity_id, $resend_schedule, string $contentType = self::contentTypes['createResendToNonOpenersUsingPOST'][0])
    {
        return $this->createResendToNonOpenersUsingPOSTAsyncWithHttpInfo($campaign_activity_id, $resend_schedule, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createResendToNonOpenersUsingPOSTAsyncWithHttpInfo
     *
     * POST a Resend to Non-openers Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  'ConstantContact\Client\Model\ResendToNonOpenersInput $resend_schedule A JSON request body that specifies when to resend the campaign activity to non-openers. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResendToNonOpenersUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createResendToNonOpenersUsingPOSTAsyncWithHttpInfo($campaign_activity_id, $resend_schedule, string $contentType = self::contentTypes['createResendToNonOpenersUsingPOST'][0])
    {
        $returnType = '\ConstantContact\Client\Model\ResendToNonOpenersObject';
        $request = $this->createResendToNonOpenersUsingPOSTRequest($campaign_activity_id, $resend_schedule, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createResendToNonOpenersUsingPOST'
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  'ConstantContact\Client\Model\ResendToNonOpenersInput $resend_schedule A JSON request body that specifies when to resend the campaign activity to non-openers. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResendToNonOpenersUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createResendToNonOpenersUsingPOSTRequest($campaign_activity_id, $resend_schedule, string $contentType = self::contentTypes['createResendToNonOpenersUsingPOST'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling createResendToNonOpenersUsingPOST'
            );
        }

        // verify the required parameter 'resend_schedule' is set
        if ($resend_schedule === null || (is_array($resend_schedule) && count($resend_schedule) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resend_schedule when calling createResendToNonOpenersUsingPOST'
            );
        }


        $resourcePath = '/emails/activities/{campaign_activity_id}/non_opener_resends';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($resend_schedule)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($resend_schedule));
            } else {
                $httpBody = $resend_schedule;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteResendToNonOpenersUsingDELETE
     *
     * DELETE a Resend to Non Openers Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $resend_request_id The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteResendToNonOpenersUsingDELETE'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteResendToNonOpenersUsingDELETE($campaign_activity_id, $resend_request_id, string $contentType = self::contentTypes['deleteResendToNonOpenersUsingDELETE'][0])
    {
        $this->deleteResendToNonOpenersUsingDELETEWithHttpInfo($campaign_activity_id, $resend_request_id, $contentType);
    }

    /**
     * Operation deleteResendToNonOpenersUsingDELETEWithHttpInfo
     *
     * DELETE a Resend to Non Openers Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $resend_request_id The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteResendToNonOpenersUsingDELETE'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteResendToNonOpenersUsingDELETEWithHttpInfo($campaign_activity_id, $resend_request_id, string $contentType = self::contentTypes['deleteResendToNonOpenersUsingDELETE'][0])
    {
        $request = $this->deleteResendToNonOpenersUsingDELETERequest($campaign_activity_id, $resend_request_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteResendToNonOpenersUsingDELETEAsync
     *
     * DELETE a Resend to Non Openers Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $resend_request_id The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteResendToNonOpenersUsingDELETE'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteResendToNonOpenersUsingDELETEAsync($campaign_activity_id, $resend_request_id, string $contentType = self::contentTypes['deleteResendToNonOpenersUsingDELETE'][0])
    {
        return $this->deleteResendToNonOpenersUsingDELETEAsyncWithHttpInfo($campaign_activity_id, $resend_request_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteResendToNonOpenersUsingDELETEAsyncWithHttpInfo
     *
     * DELETE a Resend to Non Openers Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $resend_request_id The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteResendToNonOpenersUsingDELETE'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteResendToNonOpenersUsingDELETEAsyncWithHttpInfo($campaign_activity_id, $resend_request_id, string $contentType = self::contentTypes['deleteResendToNonOpenersUsingDELETE'][0])
    {
        $returnType = '';
        $request = $this->deleteResendToNonOpenersUsingDELETERequest($campaign_activity_id, $resend_request_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteResendToNonOpenersUsingDELETE'
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $resend_request_id The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteResendToNonOpenersUsingDELETE'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteResendToNonOpenersUsingDELETERequest($campaign_activity_id, $resend_request_id, string $contentType = self::contentTypes['deleteResendToNonOpenersUsingDELETE'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling deleteResendToNonOpenersUsingDELETE'
            );
        }

        // verify the required parameter 'resend_request_id' is set
        if ($resend_request_id === null || (is_array($resend_request_id) && count($resend_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resend_request_id when calling deleteResendToNonOpenersUsingDELETE'
            );
        }


        $resourcePath = '/emails/activities/{campaign_activity_id}/non_opener_resends/{resend_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }
        // path params
        if ($resend_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'resend_request_id' . '}',
                ObjectSerializer::toPathValue($resend_request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeEmailCampaignUsingDELETE
     *
     * DELETE an Email Campaign
     *
     * @param  string $campaign_id The unique ID for the email campaign you are deleting. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeEmailCampaignUsingDELETE'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeEmailCampaignUsingDELETE($campaign_id, string $contentType = self::contentTypes['removeEmailCampaignUsingDELETE'][0])
    {
        $this->removeEmailCampaignUsingDELETEWithHttpInfo($campaign_id, $contentType);
    }

    /**
     * Operation removeEmailCampaignUsingDELETEWithHttpInfo
     *
     * DELETE an Email Campaign
     *
     * @param  string $campaign_id The unique ID for the email campaign you are deleting. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeEmailCampaignUsingDELETE'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeEmailCampaignUsingDELETEWithHttpInfo($campaign_id, string $contentType = self::contentTypes['removeEmailCampaignUsingDELETE'][0])
    {
        $request = $this->removeEmailCampaignUsingDELETERequest($campaign_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeEmailCampaignUsingDELETEAsync
     *
     * DELETE an Email Campaign
     *
     * @param  string $campaign_id The unique ID for the email campaign you are deleting. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeEmailCampaignUsingDELETE'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeEmailCampaignUsingDELETEAsync($campaign_id, string $contentType = self::contentTypes['removeEmailCampaignUsingDELETE'][0])
    {
        return $this->removeEmailCampaignUsingDELETEAsyncWithHttpInfo($campaign_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeEmailCampaignUsingDELETEAsyncWithHttpInfo
     *
     * DELETE an Email Campaign
     *
     * @param  string $campaign_id The unique ID for the email campaign you are deleting. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeEmailCampaignUsingDELETE'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeEmailCampaignUsingDELETEAsyncWithHttpInfo($campaign_id, string $contentType = self::contentTypes['removeEmailCampaignUsingDELETE'][0])
    {
        $returnType = '';
        $request = $this->removeEmailCampaignUsingDELETERequest($campaign_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeEmailCampaignUsingDELETE'
     *
     * @param  string $campaign_id The unique ID for the email campaign you are deleting. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeEmailCampaignUsingDELETE'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeEmailCampaignUsingDELETERequest($campaign_id, string $contentType = self::contentTypes['removeEmailCampaignUsingDELETE'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling removeEmailCampaignUsingDELETE'
            );
        }


        $resourcePath = '/emails/{campaign_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation renameEmailCampaignUsingPATCH
     *
     * PATCH (Update) an Email Campaign Name
     *
     * @param  string $campaign_id The unique identifier for an email campaign. (required)
     * @param  'ConstantContact\Client\Model\EmailCampaignName $body A JSON payload that contains the new email campaign name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['renameEmailCampaignUsingPATCH'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\EmailCampaign
     */
    public function renameEmailCampaignUsingPATCH($campaign_id, $body, string $contentType = self::contentTypes['renameEmailCampaignUsingPATCH'][0])
    {
        list($response) = $this->renameEmailCampaignUsingPATCHWithHttpInfo($campaign_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation renameEmailCampaignUsingPATCHWithHttpInfo
     *
     * PATCH (Update) an Email Campaign Name
     *
     * @param  string $campaign_id The unique identifier for an email campaign. (required)
     * @param  'ConstantContact\Client\Model\EmailCampaignName $body A JSON payload that contains the new email campaign name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['renameEmailCampaignUsingPATCH'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\EmailCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function renameEmailCampaignUsingPATCHWithHttpInfo($campaign_id, $body, string $contentType = self::contentTypes['renameEmailCampaignUsingPATCH'][0])
    {
        $request = $this->renameEmailCampaignUsingPATCHRequest($campaign_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\EmailCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\EmailCampaign' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\EmailCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\EmailCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\EmailCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation renameEmailCampaignUsingPATCHAsync
     *
     * PATCH (Update) an Email Campaign Name
     *
     * @param  string $campaign_id The unique identifier for an email campaign. (required)
     * @param  'ConstantContact\Client\Model\EmailCampaignName $body A JSON payload that contains the new email campaign name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['renameEmailCampaignUsingPATCH'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renameEmailCampaignUsingPATCHAsync($campaign_id, $body, string $contentType = self::contentTypes['renameEmailCampaignUsingPATCH'][0])
    {
        return $this->renameEmailCampaignUsingPATCHAsyncWithHttpInfo($campaign_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation renameEmailCampaignUsingPATCHAsyncWithHttpInfo
     *
     * PATCH (Update) an Email Campaign Name
     *
     * @param  string $campaign_id The unique identifier for an email campaign. (required)
     * @param  'ConstantContact\Client\Model\EmailCampaignName $body A JSON payload that contains the new email campaign name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['renameEmailCampaignUsingPATCH'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renameEmailCampaignUsingPATCHAsyncWithHttpInfo($campaign_id, $body, string $contentType = self::contentTypes['renameEmailCampaignUsingPATCH'][0])
    {
        $returnType = '\ConstantContact\Client\Model\EmailCampaign';
        $request = $this->renameEmailCampaignUsingPATCHRequest($campaign_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'renameEmailCampaignUsingPATCH'
     *
     * @param  string $campaign_id The unique identifier for an email campaign. (required)
     * @param  'ConstantContact\Client\Model\EmailCampaignName $body A JSON payload that contains the new email campaign name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['renameEmailCampaignUsingPATCH'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function renameEmailCampaignUsingPATCHRequest($campaign_id, $body, string $contentType = self::contentTypes['renameEmailCampaignUsingPATCH'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling renameEmailCampaignUsingPATCH'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling renameEmailCampaignUsingPATCH'
            );
        }


        $resourcePath = '/emails/{campaign_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveEmailCampaignActivityUsingGET
     *
     * GET a Single Email Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  string $include Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveEmailCampaignActivityUsingGET'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\EmailCampaignActivity
     */
    public function retrieveEmailCampaignActivityUsingGET($campaign_activity_id, $include = null, string $contentType = self::contentTypes['retrieveEmailCampaignActivityUsingGET'][0])
    {
        list($response) = $this->retrieveEmailCampaignActivityUsingGETWithHttpInfo($campaign_activity_id, $include, $contentType);
        return $response;
    }

    /**
     * Operation retrieveEmailCampaignActivityUsingGETWithHttpInfo
     *
     * GET a Single Email Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  string $include Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveEmailCampaignActivityUsingGET'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\EmailCampaignActivity, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveEmailCampaignActivityUsingGETWithHttpInfo($campaign_activity_id, $include = null, string $contentType = self::contentTypes['retrieveEmailCampaignActivityUsingGET'][0])
    {
        $request = $this->retrieveEmailCampaignActivityUsingGETRequest($campaign_activity_id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\EmailCampaignActivity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\EmailCampaignActivity' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\EmailCampaignActivity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\EmailCampaignActivity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\EmailCampaignActivity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveEmailCampaignActivityUsingGETAsync
     *
     * GET a Single Email Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  string $include Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveEmailCampaignActivityUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveEmailCampaignActivityUsingGETAsync($campaign_activity_id, $include = null, string $contentType = self::contentTypes['retrieveEmailCampaignActivityUsingGET'][0])
    {
        return $this->retrieveEmailCampaignActivityUsingGETAsyncWithHttpInfo($campaign_activity_id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveEmailCampaignActivityUsingGETAsyncWithHttpInfo
     *
     * GET a Single Email Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  string $include Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveEmailCampaignActivityUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveEmailCampaignActivityUsingGETAsyncWithHttpInfo($campaign_activity_id, $include = null, string $contentType = self::contentTypes['retrieveEmailCampaignActivityUsingGET'][0])
    {
        $returnType = '\ConstantContact\Client\Model\EmailCampaignActivity';
        $request = $this->retrieveEmailCampaignActivityUsingGETRequest($campaign_activity_id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveEmailCampaignActivityUsingGET'
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  string $include Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveEmailCampaignActivityUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveEmailCampaignActivityUsingGETRequest($campaign_activity_id, $include = null, string $contentType = self::contentTypes['retrieveEmailCampaignActivityUsingGET'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling retrieveEmailCampaignActivityUsingGET'
            );
        }



        $resourcePath = '/emails/activities/{campaign_activity_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveEmailCampaignUsingGET
     *
     * GET Details About a Single Email Campaign
     *
     * @param  string $campaign_id The ID (UUID format) that uniquely identifies this email campaign. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveEmailCampaignUsingGET'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\EmailCampaign
     */
    public function retrieveEmailCampaignUsingGET($campaign_id, string $contentType = self::contentTypes['retrieveEmailCampaignUsingGET'][0])
    {
        list($response) = $this->retrieveEmailCampaignUsingGETWithHttpInfo($campaign_id, $contentType);
        return $response;
    }

    /**
     * Operation retrieveEmailCampaignUsingGETWithHttpInfo
     *
     * GET Details About a Single Email Campaign
     *
     * @param  string $campaign_id The ID (UUID format) that uniquely identifies this email campaign. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveEmailCampaignUsingGET'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\EmailCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveEmailCampaignUsingGETWithHttpInfo($campaign_id, string $contentType = self::contentTypes['retrieveEmailCampaignUsingGET'][0])
    {
        $request = $this->retrieveEmailCampaignUsingGETRequest($campaign_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\EmailCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\EmailCampaign' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\EmailCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\EmailCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\EmailCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveEmailCampaignUsingGETAsync
     *
     * GET Details About a Single Email Campaign
     *
     * @param  string $campaign_id The ID (UUID format) that uniquely identifies this email campaign. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveEmailCampaignUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveEmailCampaignUsingGETAsync($campaign_id, string $contentType = self::contentTypes['retrieveEmailCampaignUsingGET'][0])
    {
        return $this->retrieveEmailCampaignUsingGETAsyncWithHttpInfo($campaign_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveEmailCampaignUsingGETAsyncWithHttpInfo
     *
     * GET Details About a Single Email Campaign
     *
     * @param  string $campaign_id The ID (UUID format) that uniquely identifies this email campaign. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveEmailCampaignUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveEmailCampaignUsingGETAsyncWithHttpInfo($campaign_id, string $contentType = self::contentTypes['retrieveEmailCampaignUsingGET'][0])
    {
        $returnType = '\ConstantContact\Client\Model\EmailCampaign';
        $request = $this->retrieveEmailCampaignUsingGETRequest($campaign_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveEmailCampaignUsingGET'
     *
     * @param  string $campaign_id The ID (UUID format) that uniquely identifies this email campaign. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveEmailCampaignUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveEmailCampaignUsingGETRequest($campaign_id, string $contentType = self::contentTypes['retrieveEmailCampaignUsingGET'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling retrieveEmailCampaignUsingGET'
            );
        }


        $resourcePath = '/emails/{campaign_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveEmailCampaignsUsingGET
     *
     * GET a Collection of Email Campaigns
     *
     * @param  int $limit Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)
     * @param  \DateTime $before_date Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  \DateTime $after_date Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveEmailCampaignsUsingGET'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\PagedEmailCampaignResponse
     */
    public function retrieveEmailCampaignsUsingGET($limit = 50, $before_date = null, $after_date = null, string $contentType = self::contentTypes['retrieveEmailCampaignsUsingGET'][0])
    {
        list($response) = $this->retrieveEmailCampaignsUsingGETWithHttpInfo($limit, $before_date, $after_date, $contentType);
        return $response;
    }

    /**
     * Operation retrieveEmailCampaignsUsingGETWithHttpInfo
     *
     * GET a Collection of Email Campaigns
     *
     * @param  int $limit Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)
     * @param  \DateTime $before_date Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  \DateTime $after_date Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveEmailCampaignsUsingGET'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\PagedEmailCampaignResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveEmailCampaignsUsingGETWithHttpInfo($limit = 50, $before_date = null, $after_date = null, string $contentType = self::contentTypes['retrieveEmailCampaignsUsingGET'][0])
    {
        $request = $this->retrieveEmailCampaignsUsingGETRequest($limit, $before_date, $after_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\PagedEmailCampaignResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\PagedEmailCampaignResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\PagedEmailCampaignResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\PagedEmailCampaignResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\PagedEmailCampaignResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveEmailCampaignsUsingGETAsync
     *
     * GET a Collection of Email Campaigns
     *
     * @param  int $limit Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)
     * @param  \DateTime $before_date Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  \DateTime $after_date Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveEmailCampaignsUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveEmailCampaignsUsingGETAsync($limit = 50, $before_date = null, $after_date = null, string $contentType = self::contentTypes['retrieveEmailCampaignsUsingGET'][0])
    {
        return $this->retrieveEmailCampaignsUsingGETAsyncWithHttpInfo($limit, $before_date, $after_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveEmailCampaignsUsingGETAsyncWithHttpInfo
     *
     * GET a Collection of Email Campaigns
     *
     * @param  int $limit Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)
     * @param  \DateTime $before_date Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  \DateTime $after_date Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveEmailCampaignsUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveEmailCampaignsUsingGETAsyncWithHttpInfo($limit = 50, $before_date = null, $after_date = null, string $contentType = self::contentTypes['retrieveEmailCampaignsUsingGET'][0])
    {
        $returnType = '\ConstantContact\Client\Model\PagedEmailCampaignResponse';
        $request = $this->retrieveEmailCampaignsUsingGETRequest($limit, $before_date, $after_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveEmailCampaignsUsingGET'
     *
     * @param  int $limit Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)
     * @param  \DateTime $before_date Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  \DateTime $after_date Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveEmailCampaignsUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveEmailCampaignsUsingGETRequest($limit = 50, $before_date = null, $after_date = null, string $contentType = self::contentTypes['retrieveEmailCampaignsUsingGET'][0])
    {





        $resourcePath = '/emails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before_date,
            'before_date', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after_date,
            'after_date', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveResendToNonOpenersUsingGET
     *
     * GET Details for a Resend to Non-openers Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveResendToNonOpenersUsingGET'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\ResendToNonOpenersInner[]
     */
    public function retrieveResendToNonOpenersUsingGET($campaign_activity_id, string $contentType = self::contentTypes['retrieveResendToNonOpenersUsingGET'][0])
    {
        list($response) = $this->retrieveResendToNonOpenersUsingGETWithHttpInfo($campaign_activity_id, $contentType);
        return $response;
    }

    /**
     * Operation retrieveResendToNonOpenersUsingGETWithHttpInfo
     *
     * GET Details for a Resend to Non-openers Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveResendToNonOpenersUsingGET'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\ResendToNonOpenersInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveResendToNonOpenersUsingGETWithHttpInfo($campaign_activity_id, string $contentType = self::contentTypes['retrieveResendToNonOpenersUsingGET'][0])
    {
        $request = $this->retrieveResendToNonOpenersUsingGETRequest($campaign_activity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\ResendToNonOpenersInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\ResendToNonOpenersInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\ResendToNonOpenersInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\ResendToNonOpenersInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\ResendToNonOpenersInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveResendToNonOpenersUsingGETAsync
     *
     * GET Details for a Resend to Non-openers Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveResendToNonOpenersUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveResendToNonOpenersUsingGETAsync($campaign_activity_id, string $contentType = self::contentTypes['retrieveResendToNonOpenersUsingGET'][0])
    {
        return $this->retrieveResendToNonOpenersUsingGETAsyncWithHttpInfo($campaign_activity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveResendToNonOpenersUsingGETAsyncWithHttpInfo
     *
     * GET Details for a Resend to Non-openers Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveResendToNonOpenersUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveResendToNonOpenersUsingGETAsyncWithHttpInfo($campaign_activity_id, string $contentType = self::contentTypes['retrieveResendToNonOpenersUsingGET'][0])
    {
        $returnType = '\ConstantContact\Client\Model\ResendToNonOpenersInner[]';
        $request = $this->retrieveResendToNonOpenersUsingGETRequest($campaign_activity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveResendToNonOpenersUsingGET'
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveResendToNonOpenersUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveResendToNonOpenersUsingGETRequest($campaign_activity_id, string $contentType = self::contentTypes['retrieveResendToNonOpenersUsingGET'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling retrieveResendToNonOpenersUsingGET'
            );
        }


        $resourcePath = '/emails/activities/{campaign_activity_id}/non_opener_resends';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveXrefMappingsUsingGET
     *
     * GET a Collection of V2 and V3 API Email Campaign Identifiers
     *
     * @param  string $v2_email_campaign_ids Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveXrefMappingsUsingGET'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\CrossReferenceResponse
     */
    public function retrieveXrefMappingsUsingGET($v2_email_campaign_ids, string $contentType = self::contentTypes['retrieveXrefMappingsUsingGET'][0])
    {
        list($response) = $this->retrieveXrefMappingsUsingGETWithHttpInfo($v2_email_campaign_ids, $contentType);
        return $response;
    }

    /**
     * Operation retrieveXrefMappingsUsingGETWithHttpInfo
     *
     * GET a Collection of V2 and V3 API Email Campaign Identifiers
     *
     * @param  string $v2_email_campaign_ids Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveXrefMappingsUsingGET'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\CrossReferenceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveXrefMappingsUsingGETWithHttpInfo($v2_email_campaign_ids, string $contentType = self::contentTypes['retrieveXrefMappingsUsingGET'][0])
    {
        $request = $this->retrieveXrefMappingsUsingGETRequest($v2_email_campaign_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\CrossReferenceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\CrossReferenceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\CrossReferenceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\CrossReferenceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\CrossReferenceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveXrefMappingsUsingGETAsync
     *
     * GET a Collection of V2 and V3 API Email Campaign Identifiers
     *
     * @param  string $v2_email_campaign_ids Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveXrefMappingsUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveXrefMappingsUsingGETAsync($v2_email_campaign_ids, string $contentType = self::contentTypes['retrieveXrefMappingsUsingGET'][0])
    {
        return $this->retrieveXrefMappingsUsingGETAsyncWithHttpInfo($v2_email_campaign_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveXrefMappingsUsingGETAsyncWithHttpInfo
     *
     * GET a Collection of V2 and V3 API Email Campaign Identifiers
     *
     * @param  string $v2_email_campaign_ids Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveXrefMappingsUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveXrefMappingsUsingGETAsyncWithHttpInfo($v2_email_campaign_ids, string $contentType = self::contentTypes['retrieveXrefMappingsUsingGET'][0])
    {
        $returnType = '\ConstantContact\Client\Model\CrossReferenceResponse';
        $request = $this->retrieveXrefMappingsUsingGETRequest($v2_email_campaign_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveXrefMappingsUsingGET'
     *
     * @param  string $v2_email_campaign_ids Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveXrefMappingsUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveXrefMappingsUsingGETRequest($v2_email_campaign_ids, string $contentType = self::contentTypes['retrieveXrefMappingsUsingGET'][0])
    {

        // verify the required parameter 'v2_email_campaign_ids' is set
        if ($v2_email_campaign_ids === null || (is_array($v2_email_campaign_ids) && count($v2_email_campaign_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v2_email_campaign_ids when calling retrieveXrefMappingsUsingGET'
            );
        }


        $resourcePath = '/emails/campaign_id_xrefs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $v2_email_campaign_ids,
            'v2_email_campaign_ids', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailCampaignActivityUsingPUT
     *
     * PUT (Update) An Email Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the email campaign activity you are updating. (required)
     * @param  'ConstantContact\Client\Model\EmailCampaignActivity $body A request body payload that contains the complete email campaign activity with your changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmailCampaignActivityUsingPUT'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\EmailCampaignActivity
     */
    public function updateEmailCampaignActivityUsingPUT($campaign_activity_id, $body, string $contentType = self::contentTypes['updateEmailCampaignActivityUsingPUT'][0])
    {
        list($response) = $this->updateEmailCampaignActivityUsingPUTWithHttpInfo($campaign_activity_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation updateEmailCampaignActivityUsingPUTWithHttpInfo
     *
     * PUT (Update) An Email Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the email campaign activity you are updating. (required)
     * @param  'ConstantContact\Client\Model\EmailCampaignActivity $body A request body payload that contains the complete email campaign activity with your changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmailCampaignActivityUsingPUT'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\EmailCampaignActivity, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailCampaignActivityUsingPUTWithHttpInfo($campaign_activity_id, $body, string $contentType = self::contentTypes['updateEmailCampaignActivityUsingPUT'][0])
    {
        $request = $this->updateEmailCampaignActivityUsingPUTRequest($campaign_activity_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\EmailCampaignActivity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\EmailCampaignActivity' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\EmailCampaignActivity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\EmailCampaignActivity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\EmailCampaignActivity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailCampaignActivityUsingPUTAsync
     *
     * PUT (Update) An Email Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the email campaign activity you are updating. (required)
     * @param  'ConstantContact\Client\Model\EmailCampaignActivity $body A request body payload that contains the complete email campaign activity with your changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmailCampaignActivityUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailCampaignActivityUsingPUTAsync($campaign_activity_id, $body, string $contentType = self::contentTypes['updateEmailCampaignActivityUsingPUT'][0])
    {
        return $this->updateEmailCampaignActivityUsingPUTAsyncWithHttpInfo($campaign_activity_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailCampaignActivityUsingPUTAsyncWithHttpInfo
     *
     * PUT (Update) An Email Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the email campaign activity you are updating. (required)
     * @param  'ConstantContact\Client\Model\EmailCampaignActivity $body A request body payload that contains the complete email campaign activity with your changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmailCampaignActivityUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailCampaignActivityUsingPUTAsyncWithHttpInfo($campaign_activity_id, $body, string $contentType = self::contentTypes['updateEmailCampaignActivityUsingPUT'][0])
    {
        $returnType = '\ConstantContact\Client\Model\EmailCampaignActivity';
        $request = $this->updateEmailCampaignActivityUsingPUTRequest($campaign_activity_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailCampaignActivityUsingPUT'
     *
     * @param  string $campaign_activity_id The unique ID for the email campaign activity you are updating. (required)
     * @param  'ConstantContact\Client\Model\EmailCampaignActivity $body A request body payload that contains the complete email campaign activity with your changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmailCampaignActivityUsingPUT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmailCampaignActivityUsingPUTRequest($campaign_activity_id, $body, string $contentType = self::contentTypes['updateEmailCampaignActivityUsingPUT'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling updateEmailCampaignActivityUsingPUT'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateEmailCampaignActivityUsingPUT'
            );
        }


        $resourcePath = '/emails/activities/{campaign_activity_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
