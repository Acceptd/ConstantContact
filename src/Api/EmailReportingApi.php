<?php
/**
 * EmailReportingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContact\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AppConnect V3
 *
 * The Constant Contact, Inc. V3 public API, for building integrations with Constant Contact, the leading small-business email marketing platform.
 *
 * The version of the OpenAPI document: 3.0.2400
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContact\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ConstantContact\Client\ApiException;
use ConstantContact\Client\Configuration;
use ConstantContact\Client\HeaderSelector;
use ConstantContact\Client\ObjectSerializer;

/**
 * EmailReportingApi Class Doc Comment
 *
 * @category Class
 * @package  ConstantContact\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EmailReportingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAllBulkEmailCampaignSummaries' => [
            'application/json',
        ],
        'getBounces' => [
            'application/json',
        ],
        'getCampaignActivityLinkStats' => [
            'application/json',
        ],
        'getClicks' => [
            'application/json',
        ],
        'getDidNotOpens' => [
            'application/json',
        ],
        'getEmailCampaignActivitySummary' => [
            'application/json',
        ],
        'getEmailSummary' => [
            'application/json',
        ],
        'getForwards' => [
            'application/json',
        ],
        'getOpens' => [
            'application/json',
        ],
        'getOptouts' => [
            'application/json',
        ],
        'getSends' => [
            'application/json',
        ],
        'getUniqueOpens' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAllBulkEmailCampaignSummaries
     *
     * GET an Email Campaigns Summary Report
     *
     * @param  string $limit Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to '50')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllBulkEmailCampaignSummaries'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\BulkEmailCampaignSummariesPage
     */
    public function getAllBulkEmailCampaignSummaries($limit = '50', string $contentType = self::contentTypes['getAllBulkEmailCampaignSummaries'][0])
    {
        list($response) = $this->getAllBulkEmailCampaignSummariesWithHttpInfo($limit, $contentType);
        return $response;
    }

    /**
     * Operation getAllBulkEmailCampaignSummariesWithHttpInfo
     *
     * GET an Email Campaigns Summary Report
     *
     * @param  string $limit Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to '50')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllBulkEmailCampaignSummaries'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\BulkEmailCampaignSummariesPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllBulkEmailCampaignSummariesWithHttpInfo($limit = '50', string $contentType = self::contentTypes['getAllBulkEmailCampaignSummaries'][0])
    {
        $request = $this->getAllBulkEmailCampaignSummariesRequest($limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\BulkEmailCampaignSummariesPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\BulkEmailCampaignSummariesPage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\BulkEmailCampaignSummariesPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\BulkEmailCampaignSummariesPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\BulkEmailCampaignSummariesPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllBulkEmailCampaignSummariesAsync
     *
     * GET an Email Campaigns Summary Report
     *
     * @param  string $limit Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to '50')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllBulkEmailCampaignSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllBulkEmailCampaignSummariesAsync($limit = '50', string $contentType = self::contentTypes['getAllBulkEmailCampaignSummaries'][0])
    {
        return $this->getAllBulkEmailCampaignSummariesAsyncWithHttpInfo($limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllBulkEmailCampaignSummariesAsyncWithHttpInfo
     *
     * GET an Email Campaigns Summary Report
     *
     * @param  string $limit Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to '50')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllBulkEmailCampaignSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllBulkEmailCampaignSummariesAsyncWithHttpInfo($limit = '50', string $contentType = self::contentTypes['getAllBulkEmailCampaignSummaries'][0])
    {
        $returnType = '\ConstantContact\Client\Model\BulkEmailCampaignSummariesPage';
        $request = $this->getAllBulkEmailCampaignSummariesRequest($limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllBulkEmailCampaignSummaries'
     *
     * @param  string $limit Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to '50')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllBulkEmailCampaignSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllBulkEmailCampaignSummariesRequest($limit = '50', string $contentType = self::contentTypes['getAllBulkEmailCampaignSummaries'][0])
    {



        $resourcePath = '/reports/summary_reports/email_campaign_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBounces
     *
     * GET an Email Bounces Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string[] $bounce_code To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBounces'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\BouncesTrackingActivitiesPage
     */
    public function getBounces($campaign_activity_id, $bounce_code = null, $limit = '500', string $contentType = self::contentTypes['getBounces'][0])
    {
        list($response) = $this->getBouncesWithHttpInfo($campaign_activity_id, $bounce_code, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getBouncesWithHttpInfo
     *
     * GET an Email Bounces Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string[] $bounce_code To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBounces'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\BouncesTrackingActivitiesPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBouncesWithHttpInfo($campaign_activity_id, $bounce_code = null, $limit = '500', string $contentType = self::contentTypes['getBounces'][0])
    {
        $request = $this->getBouncesRequest($campaign_activity_id, $bounce_code, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\BouncesTrackingActivitiesPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\BouncesTrackingActivitiesPage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\BouncesTrackingActivitiesPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\BouncesTrackingActivitiesPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\BouncesTrackingActivitiesPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBouncesAsync
     *
     * GET an Email Bounces Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string[] $bounce_code To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBounces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBouncesAsync($campaign_activity_id, $bounce_code = null, $limit = '500', string $contentType = self::contentTypes['getBounces'][0])
    {
        return $this->getBouncesAsyncWithHttpInfo($campaign_activity_id, $bounce_code, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBouncesAsyncWithHttpInfo
     *
     * GET an Email Bounces Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string[] $bounce_code To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBounces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBouncesAsyncWithHttpInfo($campaign_activity_id, $bounce_code = null, $limit = '500', string $contentType = self::contentTypes['getBounces'][0])
    {
        $returnType = '\ConstantContact\Client\Model\BouncesTrackingActivitiesPage';
        $request = $this->getBouncesRequest($campaign_activity_id, $bounce_code, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBounces'
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string[] $bounce_code To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBounces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBouncesRequest($campaign_activity_id, $bounce_code = null, $limit = '500', string $contentType = self::contentTypes['getBounces'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getBounces'
            );
        }


        

        $resourcePath = '/reports/email_reports/{campaign_activity_id}/tracking/bounces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bounce_code,
            'bounce_code', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignActivityLinkStats
     *
     * GET an Email Links Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  bool $no_clicks Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignActivityLinkStats'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\EmailLinks
     */
    public function getCampaignActivityLinkStats($campaign_activity_id, $no_clicks = false, string $contentType = self::contentTypes['getCampaignActivityLinkStats'][0])
    {
        list($response) = $this->getCampaignActivityLinkStatsWithHttpInfo($campaign_activity_id, $no_clicks, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignActivityLinkStatsWithHttpInfo
     *
     * GET an Email Links Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  bool $no_clicks Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignActivityLinkStats'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\EmailLinks, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignActivityLinkStatsWithHttpInfo($campaign_activity_id, $no_clicks = false, string $contentType = self::contentTypes['getCampaignActivityLinkStats'][0])
    {
        $request = $this->getCampaignActivityLinkStatsRequest($campaign_activity_id, $no_clicks, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\EmailLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\EmailLinks' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\EmailLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\EmailLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\EmailLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignActivityLinkStatsAsync
     *
     * GET an Email Links Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  bool $no_clicks Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignActivityLinkStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignActivityLinkStatsAsync($campaign_activity_id, $no_clicks = false, string $contentType = self::contentTypes['getCampaignActivityLinkStats'][0])
    {
        return $this->getCampaignActivityLinkStatsAsyncWithHttpInfo($campaign_activity_id, $no_clicks, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignActivityLinkStatsAsyncWithHttpInfo
     *
     * GET an Email Links Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  bool $no_clicks Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignActivityLinkStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignActivityLinkStatsAsyncWithHttpInfo($campaign_activity_id, $no_clicks = false, string $contentType = self::contentTypes['getCampaignActivityLinkStats'][0])
    {
        $returnType = '\ConstantContact\Client\Model\EmailLinks';
        $request = $this->getCampaignActivityLinkStatsRequest($campaign_activity_id, $no_clicks, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignActivityLinkStats'
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  bool $no_clicks Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignActivityLinkStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignActivityLinkStatsRequest($campaign_activity_id, $no_clicks = false, string $contentType = self::contentTypes['getCampaignActivityLinkStats'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getCampaignActivityLinkStats'
            );
        }



        $resourcePath = '/reports/email_reports/{campaign_activity_id}/links';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $no_clicks,
            'no_clicks', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClicks
     *
     * GET an Email Clicks Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  int $url_id The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClicks'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\ClicksTrackingActivitiesPage
     */
    public function getClicks($campaign_activity_id, $url_id = null, $limit = '500', string $contentType = self::contentTypes['getClicks'][0])
    {
        list($response) = $this->getClicksWithHttpInfo($campaign_activity_id, $url_id, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getClicksWithHttpInfo
     *
     * GET an Email Clicks Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  int $url_id The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClicks'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\ClicksTrackingActivitiesPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClicksWithHttpInfo($campaign_activity_id, $url_id = null, $limit = '500', string $contentType = self::contentTypes['getClicks'][0])
    {
        $request = $this->getClicksRequest($campaign_activity_id, $url_id, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\ClicksTrackingActivitiesPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\ClicksTrackingActivitiesPage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\ClicksTrackingActivitiesPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\ClicksTrackingActivitiesPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\ClicksTrackingActivitiesPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClicksAsync
     *
     * GET an Email Clicks Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  int $url_id The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClicks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClicksAsync($campaign_activity_id, $url_id = null, $limit = '500', string $contentType = self::contentTypes['getClicks'][0])
    {
        return $this->getClicksAsyncWithHttpInfo($campaign_activity_id, $url_id, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClicksAsyncWithHttpInfo
     *
     * GET an Email Clicks Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  int $url_id The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClicks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClicksAsyncWithHttpInfo($campaign_activity_id, $url_id = null, $limit = '500', string $contentType = self::contentTypes['getClicks'][0])
    {
        $returnType = '\ConstantContact\Client\Model\ClicksTrackingActivitiesPage';
        $request = $this->getClicksRequest($campaign_activity_id, $url_id, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClicks'
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  int $url_id The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClicks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClicksRequest($campaign_activity_id, $url_id = null, $limit = '500', string $contentType = self::contentTypes['getClicks'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getClicks'
            );
        }


        

        $resourcePath = '/reports/email_reports/{campaign_activity_id}/tracking/clicks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $url_id,
            'url_id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDidNotOpens
     *
     * GET an Email Did Not Opens Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDidNotOpens'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\DidNotOpensTrackingActivitiesPage
     */
    public function getDidNotOpens($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getDidNotOpens'][0])
    {
        list($response) = $this->getDidNotOpensWithHttpInfo($campaign_activity_id, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getDidNotOpensWithHttpInfo
     *
     * GET an Email Did Not Opens Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDidNotOpens'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\DidNotOpensTrackingActivitiesPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDidNotOpensWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getDidNotOpens'][0])
    {
        $request = $this->getDidNotOpensRequest($campaign_activity_id, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\DidNotOpensTrackingActivitiesPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\DidNotOpensTrackingActivitiesPage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\DidNotOpensTrackingActivitiesPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\DidNotOpensTrackingActivitiesPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\DidNotOpensTrackingActivitiesPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDidNotOpensAsync
     *
     * GET an Email Did Not Opens Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDidNotOpens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDidNotOpensAsync($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getDidNotOpens'][0])
    {
        return $this->getDidNotOpensAsyncWithHttpInfo($campaign_activity_id, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDidNotOpensAsyncWithHttpInfo
     *
     * GET an Email Did Not Opens Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDidNotOpens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDidNotOpensAsyncWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getDidNotOpens'][0])
    {
        $returnType = '\ConstantContact\Client\Model\DidNotOpensTrackingActivitiesPage';
        $request = $this->getDidNotOpensRequest($campaign_activity_id, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDidNotOpens'
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDidNotOpens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDidNotOpensRequest($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getDidNotOpens'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getDidNotOpens'
            );
        }

        

        $resourcePath = '/reports/email_reports/{campaign_activity_id}/tracking/didnotopens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCampaignActivitySummary
     *
     * GET an Email Campaign Activity Stats Report
     *
     * @param  string $campaign_activity_ids A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignActivitySummary'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\CampaignActivityStatsQueryResultEmail
     */
    public function getEmailCampaignActivitySummary($campaign_activity_ids, string $contentType = self::contentTypes['getEmailCampaignActivitySummary'][0])
    {
        list($response) = $this->getEmailCampaignActivitySummaryWithHttpInfo($campaign_activity_ids, $contentType);
        return $response;
    }

    /**
     * Operation getEmailCampaignActivitySummaryWithHttpInfo
     *
     * GET an Email Campaign Activity Stats Report
     *
     * @param  string $campaign_activity_ids A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignActivitySummary'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\CampaignActivityStatsQueryResultEmail, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignActivitySummaryWithHttpInfo($campaign_activity_ids, string $contentType = self::contentTypes['getEmailCampaignActivitySummary'][0])
    {
        $request = $this->getEmailCampaignActivitySummaryRequest($campaign_activity_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\CampaignActivityStatsQueryResultEmail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\CampaignActivityStatsQueryResultEmail' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\CampaignActivityStatsQueryResultEmail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\CampaignActivityStatsQueryResultEmail';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\CampaignActivityStatsQueryResultEmail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCampaignActivitySummaryAsync
     *
     * GET an Email Campaign Activity Stats Report
     *
     * @param  string $campaign_activity_ids A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignActivitySummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignActivitySummaryAsync($campaign_activity_ids, string $contentType = self::contentTypes['getEmailCampaignActivitySummary'][0])
    {
        return $this->getEmailCampaignActivitySummaryAsyncWithHttpInfo($campaign_activity_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCampaignActivitySummaryAsyncWithHttpInfo
     *
     * GET an Email Campaign Activity Stats Report
     *
     * @param  string $campaign_activity_ids A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignActivitySummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignActivitySummaryAsyncWithHttpInfo($campaign_activity_ids, string $contentType = self::contentTypes['getEmailCampaignActivitySummary'][0])
    {
        $returnType = '\ConstantContact\Client\Model\CampaignActivityStatsQueryResultEmail';
        $request = $this->getEmailCampaignActivitySummaryRequest($campaign_activity_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCampaignActivitySummary'
     *
     * @param  string $campaign_activity_ids A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignActivitySummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailCampaignActivitySummaryRequest($campaign_activity_ids, string $contentType = self::contentTypes['getEmailCampaignActivitySummary'][0])
    {

        // verify the required parameter 'campaign_activity_ids' is set
        if ($campaign_activity_ids === null || (is_array($campaign_activity_ids) && count($campaign_activity_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_ids when calling getEmailCampaignActivitySummary'
            );
        }
        

        $resourcePath = '/reports/stats/email_campaign_activities/{campaign_activity_ids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_activity_ids !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_ids' . '}',
                ObjectSerializer::toPathValue($campaign_activity_ids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailSummary
     *
     * GET an Email Campaign Stats Report
     *
     * @param  string $campaign_ids A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailSummary'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\CampaignStatsQueryResultEmail
     */
    public function getEmailSummary($campaign_ids, string $contentType = self::contentTypes['getEmailSummary'][0])
    {
        list($response) = $this->getEmailSummaryWithHttpInfo($campaign_ids, $contentType);
        return $response;
    }

    /**
     * Operation getEmailSummaryWithHttpInfo
     *
     * GET an Email Campaign Stats Report
     *
     * @param  string $campaign_ids A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailSummary'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\CampaignStatsQueryResultEmail, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSummaryWithHttpInfo($campaign_ids, string $contentType = self::contentTypes['getEmailSummary'][0])
    {
        $request = $this->getEmailSummaryRequest($campaign_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\CampaignStatsQueryResultEmail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\CampaignStatsQueryResultEmail' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\CampaignStatsQueryResultEmail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\CampaignStatsQueryResultEmail';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\CampaignStatsQueryResultEmail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailSummaryAsync
     *
     * GET an Email Campaign Stats Report
     *
     * @param  string $campaign_ids A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSummaryAsync($campaign_ids, string $contentType = self::contentTypes['getEmailSummary'][0])
    {
        return $this->getEmailSummaryAsyncWithHttpInfo($campaign_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailSummaryAsyncWithHttpInfo
     *
     * GET an Email Campaign Stats Report
     *
     * @param  string $campaign_ids A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSummaryAsyncWithHttpInfo($campaign_ids, string $contentType = self::contentTypes['getEmailSummary'][0])
    {
        $returnType = '\ConstantContact\Client\Model\CampaignStatsQueryResultEmail';
        $request = $this->getEmailSummaryRequest($campaign_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailSummary'
     *
     * @param  string $campaign_ids A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailSummaryRequest($campaign_ids, string $contentType = self::contentTypes['getEmailSummary'][0])
    {

        // verify the required parameter 'campaign_ids' is set
        if ($campaign_ids === null || (is_array($campaign_ids) && count($campaign_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_ids when calling getEmailSummary'
            );
        }
        

        $resourcePath = '/reports/stats/email_campaigns/{campaign_ids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_ids !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_ids' . '}',
                ObjectSerializer::toPathValue($campaign_ids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getForwards
     *
     * GET an Email Forwards Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getForwards'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\ForwardsTrackingActivitiesPage
     */
    public function getForwards($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getForwards'][0])
    {
        list($response) = $this->getForwardsWithHttpInfo($campaign_activity_id, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getForwardsWithHttpInfo
     *
     * GET an Email Forwards Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getForwards'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\ForwardsTrackingActivitiesPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getForwardsWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getForwards'][0])
    {
        $request = $this->getForwardsRequest($campaign_activity_id, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\ForwardsTrackingActivitiesPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\ForwardsTrackingActivitiesPage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\ForwardsTrackingActivitiesPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\ForwardsTrackingActivitiesPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\ForwardsTrackingActivitiesPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getForwardsAsync
     *
     * GET an Email Forwards Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getForwards'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getForwardsAsync($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getForwards'][0])
    {
        return $this->getForwardsAsyncWithHttpInfo($campaign_activity_id, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getForwardsAsyncWithHttpInfo
     *
     * GET an Email Forwards Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getForwards'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getForwardsAsyncWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getForwards'][0])
    {
        $returnType = '\ConstantContact\Client\Model\ForwardsTrackingActivitiesPage';
        $request = $this->getForwardsRequest($campaign_activity_id, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getForwards'
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getForwards'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getForwardsRequest($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getForwards'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getForwards'
            );
        }

        

        $resourcePath = '/reports/email_reports/{campaign_activity_id}/tracking/forwards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOpens
     *
     * GET an Email Opens Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOpens'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\OpensTrackingActivitiesPage
     */
    public function getOpens($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getOpens'][0])
    {
        list($response) = $this->getOpensWithHttpInfo($campaign_activity_id, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getOpensWithHttpInfo
     *
     * GET an Email Opens Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOpens'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\OpensTrackingActivitiesPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOpensWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getOpens'][0])
    {
        $request = $this->getOpensRequest($campaign_activity_id, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\OpensTrackingActivitiesPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\OpensTrackingActivitiesPage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\OpensTrackingActivitiesPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\OpensTrackingActivitiesPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\OpensTrackingActivitiesPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOpensAsync
     *
     * GET an Email Opens Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOpens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOpensAsync($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getOpens'][0])
    {
        return $this->getOpensAsyncWithHttpInfo($campaign_activity_id, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOpensAsyncWithHttpInfo
     *
     * GET an Email Opens Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOpens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOpensAsyncWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getOpens'][0])
    {
        $returnType = '\ConstantContact\Client\Model\OpensTrackingActivitiesPage';
        $request = $this->getOpensRequest($campaign_activity_id, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOpens'
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOpens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOpensRequest($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getOpens'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getOpens'
            );
        }

        

        $resourcePath = '/reports/email_reports/{campaign_activity_id}/tracking/opens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOptouts
     *
     * GET an Email Opt-outs Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOptouts'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\OptoutsTrackingActivitiesPage
     */
    public function getOptouts($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getOptouts'][0])
    {
        list($response) = $this->getOptoutsWithHttpInfo($campaign_activity_id, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getOptoutsWithHttpInfo
     *
     * GET an Email Opt-outs Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOptouts'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\OptoutsTrackingActivitiesPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOptoutsWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getOptouts'][0])
    {
        $request = $this->getOptoutsRequest($campaign_activity_id, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\OptoutsTrackingActivitiesPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\OptoutsTrackingActivitiesPage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\OptoutsTrackingActivitiesPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\OptoutsTrackingActivitiesPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\OptoutsTrackingActivitiesPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOptoutsAsync
     *
     * GET an Email Opt-outs Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOptouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOptoutsAsync($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getOptouts'][0])
    {
        return $this->getOptoutsAsyncWithHttpInfo($campaign_activity_id, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOptoutsAsyncWithHttpInfo
     *
     * GET an Email Opt-outs Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOptouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOptoutsAsyncWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getOptouts'][0])
    {
        $returnType = '\ConstantContact\Client\Model\OptoutsTrackingActivitiesPage';
        $request = $this->getOptoutsRequest($campaign_activity_id, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOptouts'
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOptouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOptoutsRequest($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getOptouts'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getOptouts'
            );
        }

        

        $resourcePath = '/reports/email_reports/{campaign_activity_id}/tracking/optouts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSends
     *
     * GET an Email Sends Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSends'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\SendsTrackingActivitiesPage
     */
    public function getSends($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getSends'][0])
    {
        list($response) = $this->getSendsWithHttpInfo($campaign_activity_id, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getSendsWithHttpInfo
     *
     * GET an Email Sends Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSends'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\SendsTrackingActivitiesPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSendsWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getSends'][0])
    {
        $request = $this->getSendsRequest($campaign_activity_id, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\SendsTrackingActivitiesPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\SendsTrackingActivitiesPage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\SendsTrackingActivitiesPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\SendsTrackingActivitiesPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\SendsTrackingActivitiesPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSendsAsync
     *
     * GET an Email Sends Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSends'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSendsAsync($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getSends'][0])
    {
        return $this->getSendsAsyncWithHttpInfo($campaign_activity_id, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSendsAsyncWithHttpInfo
     *
     * GET an Email Sends Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSends'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSendsAsyncWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getSends'][0])
    {
        $returnType = '\ConstantContact\Client\Model\SendsTrackingActivitiesPage';
        $request = $this->getSendsRequest($campaign_activity_id, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSends'
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSends'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSendsRequest($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getSends'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getSends'
            );
        }

        

        $resourcePath = '/reports/email_reports/{campaign_activity_id}/tracking/sends';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniqueOpens
     *
     * GET an Email Unique Opens Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueOpens'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return 'ConstantContact\Client\Model\OpensTrackingActivitiesPage
     */
    public function getUniqueOpens($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getUniqueOpens'][0])
    {
        list($response) = $this->getUniqueOpensWithHttpInfo($campaign_activity_id, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getUniqueOpensWithHttpInfo
     *
     * GET an Email Unique Opens Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueOpens'] to see the possible values for this operation
     *
     * @throws 'ConstantContact\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of 'ConstantContact\Client\Model\OpensTrackingActivitiesPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniqueOpensWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getUniqueOpens'][0])
    {
        $request = $this->getUniqueOpensRequest($campaign_activity_id, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContact\Client\Model\OpensTrackingActivitiesPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContact\Client\Model\OpensTrackingActivitiesPage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContact\Client\Model\OpensTrackingActivitiesPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContact\Client\Model\OpensTrackingActivitiesPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContact\Client\Model\OpensTrackingActivitiesPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUniqueOpensAsync
     *
     * GET an Email Unique Opens Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueOpens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniqueOpensAsync($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getUniqueOpens'][0])
    {
        return $this->getUniqueOpensAsyncWithHttpInfo($campaign_activity_id, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniqueOpensAsyncWithHttpInfo
     *
     * GET an Email Unique Opens Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueOpens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniqueOpensAsyncWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getUniqueOpens'][0])
    {
        $returnType = '\ConstantContact\Client\Model\OpensTrackingActivitiesPage';
        $request = $this->getUniqueOpensRequest($campaign_activity_id, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniqueOpens'
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueOpens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniqueOpensRequest($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getUniqueOpens'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getUniqueOpens'
            );
        }

        

        $resourcePath = '/reports/email_reports/{campaign_activity_id}/tracking/unique_opens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
